// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –±–ª–æ–∫–∞
class Block {
    constructor(title) {
        this.title = title;
    }

    render() {
        return `<div class="block"><h3>${this.title}</h3></div>`;
    }
}

// –¢–µ–∫—Å—Ç–æ–≤—ã–π –±–ª–æ–∫
class TextBlock extends Block {
    constructor(title, text) {
        super(title);
        this.text = text;
    }

    render() {
        return `
            <div class="block text-block">
                <h3 class="block-title">${this.title}</h3>
                <ul class="stat-list">
                    <li class="stat-item">
                        <span class="stat-name">${this.text}</span>
                    </li>
                </ul>
            </div>`;
    }
}

// –ë–ª–æ–∫ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
class ImageBlock extends Block {
    constructor(title, imageUrl) {
        super(title);
        this.imageUrl = imageUrl;
    }

    render() {
        return `
            <div class="block image-block">
                <h3 class="block-title">${this.title}</h3>
                <ul class="stat-list">
                    <li class="stat-item">
                        <img src="${this.imageUrl}" alt="${this.title}" class="avatar-image">
                    </li>
                </ul>
            </div>`;
    }
}

class StatBlock extends Block {
    constructor(title, stats, icons) {
        super(title);
        this.stats = stats;
        this.icons = icons; 
    }

    render() {
        let statsHtml = Object.entries(this.stats)
            .map(([key, value]) => `
                <li class="stat-item">
                    <img src="${this.icons[key]}" alt="${key}" class="stat-icon">
                    <span class="stat-name">${key}</span>
                    <span class="stat-value">${value}</span>
                </li>`)
            .join("");

        return `
            <div class="block stat-block">
                <h3 class="block-title">${this.title}</h3>
                <ul class="stat-list">
                    ${statsHtml}
                </ul>
            </div>`;
    }
}

class LevelBlock extends Block {
    constructor(level, icons) {
        super("–£—Ä–æ–≤–µ–Ω—å");
        this.level = level;
        this.icons = icons;
    }

    render() {
        return `
            <div class="block level-block">
                <h3 class="block-title">${this.title}</h3>
                <ul class="stat-list">
                    <li class="stat-item">
                        <img src="${this.icons.level}" alt="–£—Ä–æ–≤–µ–Ω—å" class="stat-icon">
                        <span class="stat-name">–¢–µ–∫—É—â–∏–π —É—Ä–æ–≤–µ–Ω—å</span>
                        <span class="stat-value">${this.level}</span>
                    </li>
                </ul>
            </div>`;
    }
}

class BasePowerBlock extends Block {
    constructor(hp, fp, stamina, icons) {
        super("–ë–∞–∑–æ–≤–∞—è —Å–∏–ª–∞");
        this.hp = hp;
        this.fp = fp;
        this.stamina = stamina;
        this.icons = icons;
    }

    render() {
        return `
            <div class="block base-power-block">
                <h3 class="block-title">${this.title}</h3>
                <ul class="stat-list">
                    <li class="stat-item">
                        <img src="${this.icons.hp}" alt="–û–ó (HP)" class="stat-icon">
                        <span class="stat-name">–û–ó (HP)</span>
                        <span class="stat-value">${this.hp}</span>
                    </li>
                    <li class="stat-item">
                        <img src="${this.icons.fp}" alt="–û–ö (FP)" class="stat-icon">
                        <span class="stat-name">–û–ö (FP)</span>
                        <span class="stat-value">${this.fp}</span>
                    </li>
                    <li class="stat-item">
                        <img src="${this.icons.stamina}" alt="–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å" class="stat-icon">
                        <span class="stat-name">–í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å</span>
                        <span class="stat-value">${this.stamina}</span>
                    </li>
                </ul>
            </div>`;
    }
}

// –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function generatePage() {

    const levelIcons = {
        "level": "img//level.webp"
    };
    
    const basePowerIcons = {
        "hp": "img//hp.webp",
        "fp": "img//fp.webp",
        "stamina": "img//stamina.webp"
    };

    const icons = {
        "–ñ–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞": "img//vigor.webp",
        "–£—á—ë–Ω–æ—Å—Ç—å": "img//attunement.webp",
        "–°—Ç–æ–π–∫–æ—Å—Ç—å": "img//endurance.webp",
        "–§–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ—â—å": "img//vitality.webp",
        "–°–∏–ª–∞": "img//strength.webp",
        "–õ–æ–≤–∫–æ—Å—Ç—å": "img//dexterity.webp",
        "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç": "img//intelligence.webp",
        "–í–µ—Ä–∞": "img//faith.webp",
        "–£–¥–∞—á–∞": "img//luck.webp",
    };

    const blocks = [
        new TextBlock("–ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞", "Cetaera"),
        new ImageBlock("–ö–ª–∞—Å—Å", "img//sorcerer.webp"),
        new LevelBlock(68, levelIcons),
        new BasePowerBlock(828, 136, 111, basePowerIcons),
        new StatBlock("–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏", {
            "–ñ–∏–∑–Ω–µ–Ω–Ω–∞—è —Å–∏–ª–∞": 21,
            "–£—á—ë–Ω–æ—Å—Ç—å": 18,
            "–°—Ç–æ–π–∫–æ—Å—Ç—å": 15,
            "–§–∏–∑–∏—á–µ—Å–∫–∞—è –º–æ—â—å": 11,
            "–°–∏–ª–∞": 22,
            "–õ–æ–≤–∫–æ—Å—Ç—å": 20,
            "–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç": 30,
            "–í–µ—Ä–∞": 8,
            "–£–¥–∞—á–∞": 12
        }, icons) // –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—ä–µ–∫—Ç —Å –∏–∫–æ–Ω–∫–∞–º–∏
    ];

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    const container = document.getElementById("profile-container");

    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –±–ª–æ–∫–∏ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    blocks.forEach(block => {
        container.innerHTML += block.render();
    });
}

document.addEventListener('DOMContentLoaded', function() {
    const header = document.querySelector('header');
    const editButton = document.createElement('button');
    editButton.textContent = 'üñäÔ∏è'; // –≠–º–æ–¥–∑–∏ –∫–∞—Ä–∞–Ω–¥–∞—à–∞
    editButton.id = 'editButton';
    editButton.style.position = 'absolute';
    editButton.style.top = '25px';
    editButton.style.right = '25px';
    header.appendChild(editButton);
    

    editButton.addEventListener('click', function() {
        document.body.classList.toggle('edit-mode');
        
        if (document.body.classList.contains('edit-mode')) {
            // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
            const statValues = document.querySelectorAll('.stat-value');
            const statNames = document.querySelectorAll('.stat-name');
            const avatarImages = document.querySelectorAll('.avatar-image');
            const blockTitles = document.querySelectorAll('.block-title');
            const statIcons = document.querySelectorAll('.stat-icon'); 

            statValues.forEach(value => {
                const input = document.createElement('input');
                input.type = 'number';
                input.value = value.textContent;
                input.min = 1;
                input.max = 1000;
            
                value.replaceWith(input);
            
                input.addEventListener('input', function() {
                    if (input.value < 0) {
                        alert("–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω—å—à–µ 1.");
                        input.value = 1; 
                    }
                    if (input.value > 1000) {
                        alert("–ó–Ω–∞—á–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –±–æ–ª—å—à–µ 1000.");
                        input.value = 1000;
                    }
                    if (input.value.trim() === '') { 
                        alert("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
                        input.value = value.textContent; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    }
                });
            });

            statNames.forEach(name => {
                const input = document.createElement('input');
                input.type = 'text';
                input.value = name.textContent;

                name.replaceWith(input);
                
                input.addEventListener('input', function() {
                    input.value = input.value.replace(/\d/g, ''); // –£–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—ã
            
                    if (input.value.length > 16) {
                        alert("–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 16 —Å–∏–º–≤–æ–ª–æ–≤.");
                        input.value = input.value.substring(0, 16); // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤
                    }

                    if (input.value.trim() === '') { 
                        alert("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
                        input.value = name.textContent; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    }
                });

            });

            avatarImages.forEach(image => {
                image.addEventListener('click', function() {
                    const input = document.createElement('input');
                    input.type = 'file';
                    input.accept = 'image/*';
                
                    input.addEventListener('change', function() {
                        if (input.files.length > 0) {
                            const file = input.files[0];
                            if (file.type.includes('image')) {
                                if (file.size > 1024 * 1024 * 5) { // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ 5 –ú–ë
                                    alert("–†–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5 –ú–ë.");
                                    return;
                                }
                                const reader = new FileReader();
                                reader.onload = function(e) {
                                    image.src = e.target.result;
                                };
                                reader.readAsDataURL(file);
                            } else {
                                alert("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.");
                            }
                        }
                    });
                
                    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
                    input.click();
                });
            });

            statIcons.forEach(icon => {
                icon.addEventListener('click', function() {
                    const input = document.createElement('input');
                    input.type = 'file';
                    input.accept = 'image/*';
                
                    input.addEventListener('change', function() {
                        if (input.files.length > 0) {
                            const file = input.files[0];
                            if (file.type.includes('image')) {
                                if (file.size > 1024 * 1024 * 5) { // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –¥–æ 5 –ú–ë
                                    alert("–†–∞–∑–º–µ—Ä –∏–∫–æ–Ω–∫–∏ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 5 –ú–ë.");
                                    return;
                                }
                                const reader = new FileReader();
                                reader.onload = function(e) {
                                    icon.src = e.target.result;
                                };
                                reader.readAsDataURL(file);
                            } else {
                                alert("–í—ã–±—Ä–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.");
                            }
                        }
                    });
                
                    // –ü–æ–∫–∞–∑–∞—Ç—å –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞
                    input.click();
                });
            });

            blockTitles.forEach(title => {
                const input = document.createElement('input');
                input.type = 'text';
                input.value = title.textContent;

                title.replaceWith(input);
                
                input.addEventListener('input', function() {
                    input.value = input.value.replace(/\d/g, ''); // –£–±–∏—Ä–∞–µ–º —Ü–∏—Ñ—Ä—ã
            
                    if (input.value.length > 16) {
                        alert("–î–ª–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–µ –¥–æ–ª–∂–Ω–∞ –ø—Ä–µ–≤—ã—à–∞—Ç—å 16 —Å–∏–º–≤–æ–ª–æ–≤.");
                        input.value = input.value.substring(0, 16); // –û–±—Ä–µ–∑–∞–µ–º –¥–æ 16 —Å–∏–º–≤–æ–ª–æ–≤
                    }
                    if (input.value.trim() === '') { 
                        alert("–ü–æ–ª–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.");
                        input.value =title.textContent; // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                    }
                });
            
            });
            
        } else {
            // –û—Ç–º–µ–Ω—è–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –ø–æ–ª–µ–π
            const inputs = document.querySelectorAll('input');
            inputs.forEach(input => {
                if (input.type === 'number') {
                    const statValue = document.createElement('span');
                    statValue.classList.add('stat-value');
                    statValue.textContent = input.value;
                    input.replaceWith(statValue);
                } else if (input.type === 'text') {
                    if (input.previousElementSibling && input.previousElementSibling.classList.contains('stat-icon')) {
                        const statName = document.createElement('span');
                        statName.classList.add('stat-name');
                        statName.textContent = input.value;
                        input.replaceWith(statName);
                    } else if (input.previousElementSibling && input.previousElementSibling.classList.contains('block-title')) {
                        const blockTitle = document.createElement('h3');
                        blockTitle.classList.add('block-title');
                        blockTitle.textContent = input.value;
                        blockTitle.style.fontSize = '1.3em';
                        input.replaceWith(blockTitle);
                    } else {
                        const statName = document.createElement('span');
                        statName.classList.add('stat-name');
                        statName.textContent = input.value;
                        input.replaceWith(statName);
                    }
                }
            });
        }
    });
});

// –ó–∞–ø—É—Å–∫–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener("DOMContentLoaded", generatePage);
